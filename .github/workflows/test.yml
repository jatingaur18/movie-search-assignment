name: Movie Search Tests

# Trigger the workflow on push and pull requests to main branch
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    # Step 1: Checkout the repository code
    - uses: actions/checkout@v4
    
    # Step 2: Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    # Step 3: Cache pip dependencies for faster builds
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # Additional testing tools
    
    # Step 5: Lint code with flake8 (optional but good practice)
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    # Step 6: Run unit tests
    - name: Run unit tests
      run: |
        python -m unittest tests/test_movie_search.py -v
    
    # Step 7: Test the main module directly
    - name: Test main module
      run: |
        python -c "
        from movie_search import search_movies
        print('Testing search function...')
        results = search_movies('spy thriller', top_n=3)
        print(f'✅ Search returned {len(results)} results')
        print(f'✅ Columns: {list(results.columns)}')
        assert len(results) == 3, 'Should return 3 results'
        assert 'similarity_score' in results.columns, 'Should have similarity_score column'
        print('✅ All basic functionality tests passed!')
        "
    
    - name: Generate coverage report
      run: |
        pip install coverage
        coverage run -m unittest tests/test_movie_search.py
        coverage report -m