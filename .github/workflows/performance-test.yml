name: Performance Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  performance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      run: |
        python -c "
        import time
        from movie_search import search_movies
        
        print('Running performance tests...')
        
        start_time = time.time()
        results = search_movies('spy thriller', top_n=5)
        load_time = time.time() - start_time
        print(f'Initial search (with model loading): {load_time:.2f}s')
        
        start_time = time.time()
        results = search_movies('government conspiracy', top_n=5)
        search_time = time.time() - start_time
        print(f'Subsequent search: {search_time:.2f}s')
        
        queries = ['spy', 'thriller', 'action', 'drama', 'mystery']
        start_time = time.time()
        for query in queries:
            search_movies(query, top_n=3)
        batch_time = time.time() - start_time
        print(f'Batch search (5 queries): {batch_time:.2f}s')
        
        assert search_time < 1.0, f'Search too slow: {search_time:.2f}s > 1.0s'
        assert batch_time < 5.0, f'Batch search too slow: {batch_time:.2f}s > 5.0s'
        
        print('All performance tests passed!')
        print(f'Performance Summary:')
        print(f'   - Single search: {search_time:.3f}s')
        print(f'   - Batch search: {batch_time/len(queries):.3f}s per query')
        "
    
    - name: Memory usage test
      run: |
        python -c "
        import psutil
        import os
        from movie_search import search_movies
        
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024
        
        results = search_movies('spy thriller', top_n=5)
        
        final_memory = process.memory_info().rss / 1024 / 1024
        memory_used = final_memory - initial_memory
        
        print(f'Memory Usage:')
        print(f'   - Initial: {initial_memory:.1f} MB')
        print(f'   - Final: {final_memory:.1f} MB')
        print(f'   - Used: {memory_used:.1f} MB')
        
        assert final_memory < 500, f'Memory usage too high: {final_memory:.1f} MB'
        print('Memory usage is acceptable!')
        "